type ProposalStatus = variant {
  active;
  accepted;
  rejected;
  implemented;
};

type VoteType = variant {
  for;
  against;
};

type Proposal = record {
  id: text;
  title: text;
  description: text;
  proposerPrincipal: principal;
  category: text;
  status: ProposalStatus;
  votesFor: nat;
  votesAgainst: nat;
  createdAt: nat64;
  deadline: nat64;
};

type Vote = record {
  proposalId: text;
  voterPrincipal: principal;
  voteType: VoteType;
  votingPower: nat;
  timestamp: nat64;
};

service : {
  createProposal: (text, text, text, nat64) -> (Proposal);
  getProposal: (text) -> (opt Proposal) query;
  getActiveProposals: () -> (vec Proposal) query;
  getPastProposals: () -> (vec Proposal) query;
  vote: (text, VoteType) -> (Vote);
  getUserVotingPower: () -> (nat) query;
  getUserVote: (text) -> (opt Vote) query;
  getProposalVotes: (text) -> (vec Vote) query;
}