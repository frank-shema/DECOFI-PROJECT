
type ProposalStatus = variant {
  Active;
  Passed;
  Rejected;
  Executed;
  Canceled;
};

type VoteType = variant {
  Yes;
  No;
  Abstain;
};

type ProposalType = variant {
  FeatureRequest;
  BudgetAllocation;
  PolicyChange;
  MembershipRule;
  TokenIssuance;
  Other;
};

type Proposal = record {
  id : text;
  creator : principal;
  title : text;
  description : text;
  proposal_type : ProposalType;
  voting_start : nat64;
  voting_end : nat64;
  status : ProposalStatus;
  yes_votes : nat64;
  no_votes : nat64;
  abstain_votes : nat64;
  min_votes_required : nat64;
  execution_timestamp : opt nat64;
  created_at : nat64;
};

type UserVote = record {
  proposal_id : text;
  user : principal;
  vote_type : VoteType;
  voting_power : nat64;
  timestamp : nat64;
};

type TokenBalance = record {
  principal : principal;
  amount : nat64;
};

service : {
  create_proposal : (text, text, ProposalType, nat64) -> (Proposal);
  get_proposals : () -> (vec Proposal) query;
  get_proposal : (text) -> (opt Proposal) query;
  vote : (text, VoteType) -> (UserVote);
  get_user_votes : () -> (vec UserVote) query;
  get_proposal_votes : (text) -> (vec UserVote) query;
  get_token_balance : () -> (nat64) query;
  get_voting_power : () -> (nat64) query;
  execute_proposal : (text) -> (Proposal);
  cancel_proposal : (text) -> (Proposal);
};
